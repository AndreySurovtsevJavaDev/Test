package theory;

public class Theory {
}

// 1. Что такое JVM, JRE и JDK? В чём разница?

// JVM (виртуальная машина java) - это программа, которая отвечает за исполнение байт-кода (предварительно скомпилированного javac).
// Виртуальная машина позволяет запускать java-код на любой операционной системе где она установлена, без необходимости адаптировать код под ОС.

// JRE (java runtime environment) - входит в состав JDK и включает в себя JWM и библиотеки классов.
// JRE отвечает только за запуск и выполнение уже готовых программ.

// JDK (java developer kit) - Это по сути множество библиотек и инструментов необходимых для работы с программами на java.
// Включает в себя и JRE, и JVM, и др.
// Позволяет работать с программами уже комплексно: т.е и писать, и запускать, и отлаживать, и т.д

//--------------------------------------------------------------------------------------------------------------------


// 2. Объясните принцип работы сборщика мусора (Garbage Collector)

// После выполнения программы сборщик мусора вычищает элементы из памяти, которые создавались в ходе выполнения программы, но больше не используются.
// Например: все объявленные переменные, заполненные массивы, ссылки из кучи.
// В отличие от языка C делает это автоматом.

//--------------------------------------------------------------------------------------------------------------------


// 3. Что такое final, finally и finalize?

// final - это модификатор доступа, который по сути блокирует внесение изменений.
// Переменные с final не могут быть переназначены после инициализации.
// Т.е если мы присвоили переменной значение внутри класса, то всем одноимённым переменным в экземплярах класса будут присвоены эти же значения
// Методы с final нельзя переопределить.
// Т.е в дочернем классе не получится написать свою реализацию метода из родительского класса

// finaly - ключевое слово, которое используется в работе с исключениями.
// Код обозначенный этим ключевым словом выполняется всегда, независимо от того, было исключение или нет.
// Пишут, что Обычно используется для освобождения ресурсов, но я не понимаю как это работает. Видимо, как-то запускает сборщик мусора.

// finalize
// - это мы не проходили)))

//--------------------------------------------------------------------------------------------------------------------


// 4. В чём разница между == и equals()?
// а вот не помню. Помню, что equals используется с классами обёртками

//--------------------------------------------------------------------------------------------------------------------


// 5. Что такое перегрузка (overloading) и переопределение (overriding) методов?
// Перегрузка - это когда методу (с одним и тем же именем) в аргументах прописываются различные типы данных и различное количество принимаемых параметров.
// При этом работа метода не меняется (в отличие от переопределения).
// Хороший пример: метод print(). Аргументом принимает всё подряд.

// Переопределение методов - это когда в дочернем классе пишется новая реализация метода из родительского класса.
// Т.е то как будет работать переопределённый метод может радикально отличаться от того, как работает метод в родителе.

//--------------------------------------------------------------------------------------------------------------------


// 6. Какие модификаторы доступа существуют в Java? Как они работают?

// Для классов: private, public, protected
// для переменных и методов: public, private, static, final
// Если общими словами, то модификаторы доступа регулируют поведение элементов и их доступность ограничивая или расширяя их.

//--------------------------------------------------------------------------------------------------------------------


// 7. Что такое полиморфизм? Приведите пример
// Ну тут уже въелось, что все всегда начинают с дословного перевода - много форм.
// Это когда у нас есть множество сущностей имеющих общие признаки, но разное назначение и/или реализацию, что позволяет нам объединять эти сущности в некие группы (классы/ методы)
// Вот как я понял, полиморфизма нам помогает добиваться, например, перегрузка методов, с помощью которой создаётся иллюзия того,
//что один метод может работать со множеством типов аргументов.
// В контексте классов это использование модификаторов доступа, абстракций и наследования, когда дочерние классы имеют свою реализацию отличную от родительской,
//при этом ведущими себя аналогично родителю.
// Пример: Есть техника (сузим до бытовой). Это звучит как абстракция, которую можно наделить некими общими признаками, например: вся техника работает от источника питания.
// При этом отдельные виды бытовой техники будут выполнять разные задачи. Стиралка - стирает, СВЧ - разогревает и т.д. Каждый из видов работает от источника энергии, но при этом они могут отличаться (параметры будут разными)


//--------------------------------------------------------------------------------------------------------------------


// 8. Чем абстрактный класс отличается от интерфейса?
// Классы могут наследоваться от любого количества интерфейсов, а от абстрактных классов только от одного.
// В Интерфейсах по сути просто набор НЕ реализованных методов, которые будут переопределёны, т.к интерфейсы по своей сути не предполагают реализации.
//А абстрактные классы могут содержать методы, которые уже реализованы.

//--------------------------------------------------------------------------------------------------------------------


// 9. Что такое static? Где и зачем используется?
// Это модификатор доступа. Помню, что используется с переменными и методами.
// Позволяет использовать переменные и методы не создавая экземпляры объектов этого класса.
// Пример: класс Math

//--------------------------------------------------------------------------------------------------------------------


// 10. Что такое this и super? Приведите примеры использования
// ключевое слово this мы используем, когда надо

//--------------------------------------------------------------------------------------------------------------------


// 11. Что такое исключения (exceptions)? Какие виды исключений вы знаете?
// Исключение - это событие, которое по сути ломает ход выполнения программы и нужны, чтобы приложение не падало на этапе компиляции.
// Есть проверяемые и непроверяемые исключения
// для проверяемых мы используем try catch и thrown (т.н явная обработка), а непроверяемые устраняем в ходе разработки приложения т.к это,
// чаще всего, ошибки в логике.

//--------------------------------------------------------------------------------------------------------------------


// 12 В чём разница между ArrayList и LinkedList?


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------
